{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["BoxMesh","position","color","args","mesh","castShadow","receiveShadow","attach","speed","GroupBoxMesh","ref","useRef","useFrame","current","rotation","y","x","Bulb","props","App","colorManagement","shadows","camera","fov","fallback","intensity","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAQMA,EAAU,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,SAA0C,IAAhCC,aAAgC,MAAxB,YAAwB,EAAXC,EAAW,EAAXA,KAahD,OACE,eAAC,IAAEC,KAAH,CAEEH,SAAUA,EAEVI,YAAU,EACVC,eAAa,EALf,UAOE,mCACEC,OAAO,WACPJ,KAAMA,IAER,kDACEI,OAAO,WACPL,MAAO,YACPM,MAAO,GAHT,QAISN,QAYTO,EAAe,SAAC,GAAa,EAAXN,KAAY,IAC5BO,EAAMC,iBAAO,MAGnB,OAFAC,aAAS,kBAAOF,EAAIG,QAAQC,SAASC,EAAIL,EAAIG,QAAQC,SAASE,GAAK,QAGjE,wBAAON,IAAKA,EAAZ,UACE,cAAC,EAAD,CAAST,SAAU,CAAC,EAAG,KAAM,GAAIE,KAAM,CAAC,EAAG,GAAK,GAAID,MAAM,YAC1D,cAAC,EAAD,CAASD,SAAU,CAAC,EAAG,EAAG,GAAIE,KAAM,CAAC,EAAG,IAAK,GAAID,MAAM,gBAKvDe,EAAO,SAACC,GACZ,OACE,gDAAUA,GAAV,aACE,4BAAYb,YAAU,QAsCbc,MA/Bf,WACE,OACE,mCACE,cAAC,IAAD,CAAQC,iBAAe,EAACC,SAAO,EAACC,OAAQ,CAAErB,SAAU,CAAC,EAAG,EAAG,GAAIsB,IAAK,IAApE,SACE,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,8BAAcC,UAAW,KAgBzB,cAAC,EAAD,IACA,cAAC,EAAD,CAAMxB,SAAU,CAAC,EAAG,EAAG,KACvB,cAACyB,EAAA,EAAD,YClFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a4c32f52.chunk.js","sourcesContent":["import { useRef, Suspense } from 'react';\r\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\r\nimport * as THREE from 'three';\r\nimport { useSpring, a } from '@react-spring/three';\r\nimport { OrbitControls } from '@react-three/drei';\r\n\r\nimport './App.scss';\r\n\r\nconst BoxMesh = ({ position, color = 'lightblue', args }) => {\r\n  // const ref = useRef(null);\r\n  // const [colorMap, displacementMap, normalMap, roughnessMap, ambientMap] =\r\n  //   useLoader(THREE.TextureLoader, [\r\n  //     '/color.jpg',\r\n  //     '/displacement.jpg',\r\n  //     '/normal.jpg',\r\n  //     '/roughness.jpg',\r\n  //     '/ambient-occlusion.jpg',\r\n  //   ]);\r\n\r\n  // useFrame(() => (ref.current.rotation.y = ref.current.rotation.x += 0.002));\r\n\r\n  return (\r\n    <a.mesh\r\n      // ref={ref}\r\n      position={position}\r\n      // rotation={[0.2, 0, 0.1]}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      <boxBufferGeometry\r\n        attach=\"geometry\"\r\n        args={args} //size of the box\r\n      />\r\n      <meshPhysicalMaterial\r\n        attach=\"material\"\r\n        color={'lightblue'}\r\n        speed={2}\r\n        color={color}\r\n        // map={colorMap}\r\n        // displacementScale={0}\r\n        // displacementMap={displacementMap}\r\n        // normalMap={normalMap}\r\n        // roughnessMap={roughnessMap}\r\n        // aoMap={ambientMap}\r\n      />\r\n    </a.mesh>\r\n  );\r\n};\r\n\r\nconst GroupBoxMesh = ({ args }) => {\r\n  const ref = useRef(null);\r\n  useFrame(() => (ref.current.rotation.y = ref.current.rotation.x += 0.002));\r\n\r\n  return (\r\n    <group ref={ref}>\r\n      <BoxMesh position={[0, 1.19, 0]} args={[2, 0.8, 2]} color=\"#60A5BF\" />\r\n      <BoxMesh position={[0, 0, 0]} args={[2, 1.5, 2]} color=\"#3D7E98\" />\r\n    </group>\r\n  );\r\n};\r\n\r\nconst Bulb = (props) => {\r\n  return (\r\n    <mesh {...props}>\r\n      <pointLight castShadow />\r\n      {/* <sphereBufferGeometry args={[0.2]} /> */}\r\n      {/* <meshPhongMaterial emissive={'yellow'} /> */}\r\n    </mesh>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Canvas colorManagement shadows camera={{ position: [3, 3, 3], fov: 60 }}>\r\n        <Suspense fallback={null}>\r\n          <ambientLight intensity={0.3} />\r\n          {/* <pointLight position={[-10, 0, -20]} intensity={0.5} />\r\n          <pointLight position={[0, -10, 0]} intensity={1.5} /> */}\r\n          {/* <directionalLight\r\n            castShadow\r\n            position={[5, 4, 5]}\r\n            intensity={1.5}\r\n            shadow-mapSize-width={1024}\r\n            shadow-mapSize-height={1024}\r\n            shadow-camera-far={50}\r\n            shadow-camera-left={-10}\r\n            shadow-camera-right={10}\r\n            shadow-camera-top={10}\r\n            shadow-camera-bottom={-10}\r\n          /> */}\r\n\r\n          <GroupBoxMesh />\r\n          <Bulb position={[3, 3, 0]} />\r\n          <OrbitControls />\r\n          {/* <axesHelper args={[5]} /> */}\r\n        </Suspense>\r\n      </Canvas>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}